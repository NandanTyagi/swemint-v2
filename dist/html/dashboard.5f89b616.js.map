{"mappings":"","sources":["scripts/dashboard.js"],"sourcesContent":["// // import { appId, serverUrl } from \"../.secret\";\r\n// const serverUrl = \"https://zjaux8t7jfje.usemoralis.com:2053/server\";\r\n// const appId = \"dsGPCxn9M5fRH1VVOysTr2Z5dtdLwxq4XOmMbkZH\";\r\n// const contractAddress = \"0x5ef7359319a186004277c613147ecfcda4ed8c90\";\r\n// const chain = \"rinkeby\";\r\n\r\n// async function loginMetamask() {\r\n//   console.log(\"In Dashboard\");\r\n//   // Rinkeby testnet server on Moralis\r\n//   Moralis.start({ serverUrl, appId });\r\n\r\n//   let currentUser = Moralis.User.current();\r\n\r\n//   if (!currentUser) {\r\n//     currentUser = await Moralis.Web3.authenticate();\r\n//   }\r\n\r\n//   const options = {\r\n//     address: contractAddress,\r\n//     chain: chain,\r\n//   };\r\n//   let NFTs = await Moralis.Web3API.token.getAllTokenIds(options);\r\n//   console.log(\"nfts\", NFTs);\r\n//   let nftWithMetadata = await fetchNftMetadata(await NFTs.result);\r\n//   console.log(\"nfts metadata\", nftWithMetadata);\r\n//   renderInventory(nftWithMetadata);\r\n// }\r\n\r\n// document.addEventListener(\"DOMContentLoaded\", () => loginMetamask());\r\n\r\n// //Get metadata for one token. Ex: USDT token on ETH\r\n// function fetchNftMetadata(nfts) {\r\n//   let promises = [];\r\n//   for (let i = 0; i < nfts.length; i++) {\r\n//     let nft = nfts[i];\r\n//     let nftId = nft.token_id;\r\n//     // Call moralis cloud function\r\n//     promises.push(\r\n//       fetch(\r\n//         `${serverUrl}/functions/getNFT?_ApplicationId=${appId}&nftId=${nftId}`\r\n//       )\r\n//         .then((res) => res.json())\r\n//         .then((res) => JSON.parse(res.result))\r\n//         .then((res) => (nft.metadata = res))\r\n//         .then(() => {\r\n//           const options = { address: contractAddress, token_id: nftId, chain: chain}\r\n//           return Moralis.Web3API.token.getTokenIdOwners(options);\r\n//         })\r\n//         .then((res) => {\r\n//           nft.owners = [];\r\n//           res.result.forEach(token => {\r\n//             nft.owners.push(token.ownerOf);\r\n//           });\r\n//           return nft;\r\n//         })\r\n//     );\r\n//   }\r\n//   return Promise.all(promises);\r\n// }\r\n\r\n// function renderInventory(nfts) {\r\n//   const parent = document.getElementById(\"app\");\r\n//   for (let i = 0; i < nfts.length; i++) {\r\n//     const nft = nfts[i];\r\n//     let htmlString = `\r\n//     <div class=\"card\">\r\n//       <img src=\"${nft.metadata.image}\" class=\"card-img-top\" alt=\"...\">\r\n//       <div class=\"card-body\">\r\n//         <h5 class=\"card-title\">${nft.metadata.name}</h5>\r\n//         <p class=\"card-text\">${nft.metadata.description}</p>\r\n//         <a href=\"#\" class=\"btn btn-primary\">Go somewhere</a>\r\n//       </div>\r\n//     </div>\r\n//     `;\r\n//     let col = document.createElement(\"div\");\r\n//     col.classname = \"col col-md-4\";\r\n//     col.innerHTML = htmlString;\r\n//     parent.appendChild(col);\r\n//   }\r\n// }\r\n"],"names":[],"version":3,"file":"dashboard.5f89b616.js.map","sourceRoot":"/__parcel_source_root/"}