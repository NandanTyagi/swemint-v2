{"mappings":"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","sources":["scripts/dashboard.js"],"sourcesContent":["// import { appId, serverUrl } from \"../.secret\";\r\nconst serverUrl = \"https://zjaux8t7jfje.usemoralis.com:2053/server\";\r\nconst appId = \"dsGPCxn9M5fRH1VVOysTr2Z5dtdLwxq4XOmMbkZH\";\r\nconst contractAddress = \"0x5ef7359319a186004277c613147ecfcda4ed8c90\";\r\nconst chain = \"rinkeby\";\r\n\r\nasync function loginMetamask() {\r\n  console.log(\"In Dashboard\");\r\n  // Rinkeby testnet server on Moralis\r\n  Moralis.start({ serverUrl, appId });\r\n\r\n  let currentUser = Moralis.User.current();\r\n\r\n  if (!currentUser) {\r\n    currentUser = await Moralis.Web3.authenticate();\r\n  }\r\n\r\n  const options = {\r\n    address: contractAddress,\r\n    chain: chain,\r\n  };\r\n  let NFTs = await Moralis.Web3API.token.getAllTokenIds(options);\r\n  console.log(\"nfts\", NFTs);\r\n  let nftWithMetadata = await fetchNftMetadata(await NFTs.result);\r\n  console.log(\"nfts metadata\", nftWithMetadata);\r\n  renderInventory(nftWithMetadata);\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => loginMetamask());\r\n\r\n//Get metadata for one token. Ex: USDT token on ETH\r\nfunction fetchNftMetadata(nfts) {\r\n  let promises = [];\r\n  for (let i = 0; i < nfts.length; i++) {\r\n    let nft = nfts[i];\r\n    let nftId = nft.token_id;\r\n    // Call moralis cloud function\r\n    promises.push(\r\n      fetch(\r\n        `${serverUrl}/functions/getNFT?_ApplicationId=${appId}&nftId=${nftId}`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((res) => JSON.parse(res.result))\r\n        .then((res) => (nft.metadata = res))\r\n        .then(() => {\r\n          const options = { address: contractAddress, token_id: nftId, chain: chain}\r\n          return Moralis.Web3API.token.getTokenIdOwners(options);\r\n        })\r\n        .then((res) => {\r\n          // nft.owners = [];*********************************************\r\n          \r\n        })\r\n    );\r\n  }\r\n  return Promise.all(promises);\r\n}\r\n\r\nfunction renderInventory(nfts) {\r\n  const parent = document.getElementById(\"app\");\r\n  for (let i = 0; i < nfts.length; i++) {\r\n    const nft = nfts[i];\r\n    let htmlString = `\r\n    <div class=\"card\">\r\n      <img src=\"${nft.metadata.image}\" class=\"card-img-top\" alt=\"...\">\r\n      <div class=\"card-body\">\r\n        <h5 class=\"card-title\">${nft.metadata.name}</h5>\r\n        <p class=\"card-text\">${nft.metadata.description}</p>\r\n        <a href=\"#\" class=\"btn btn-primary\">Go somewhere</a>\r\n      </div>\r\n    </div>\r\n    `;\r\n    let col = document.createElement(\"div\");\r\n    col.classname = \"col col-md-4\";\r\n    col.innerHTML = htmlString;\r\n    parent.appendChild(col);\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"dashboard.5f89b616.js.map","sourceRoot":"/__parcel_source_root/"}